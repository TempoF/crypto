/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ce;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import objects.*;
import org.bouncycastle.util.encoders.Hex;

/**
 *
 * @author Tempori
 */
public class VOTE extends javax.swing.JFrame {

    /**
     * Creates new form VOTE
     */
    private String fingerprint;
    String MID="127.0.0.1";
    String MVD="127.0.0.1";
    public VOTE(String fingerprint) {
        this.fingerprint=fingerprint;
        initComponents();
    }
    
    public VOTE() {
        initComponents();
//        System.exit(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Choose your candidate");

        jLabel3.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html><p align=\"center\">Click on the candidate of your choice, remember that your vote is secret and unique, once elected there will be no changes.</p></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 76, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void vote(MouseEvent e){
        System.out.println("\n****************************************************\n");
        System.out.println("Id del candidato seleccionado: "+ e.getComponent().getName());
        //Vernam
        
       VERNAM coder = new VERNAM();
       String vprime=coder.getVernam(e.getComponent().getName(),this.fingerprint);
        System.out.println("Voto enmascarado (V') : "+(vprime));
        
        //descifrado
        String vprimer;
        VERNAM coder1 = new VERNAM();
        vprimer=coder1.getVernam(vprime,this.fingerprint);
        System.out.println("Id del candidato : "+(vprimer));
        
        //send 
        try {
            Socket sck=new Socket(MID,6986);
            ObjectOutputStream out= new ObjectOutputStream(sck.getOutputStream());
            SHA256 comd = new SHA256("Signature");           
            ArrayList<String> sender =new ArrayList<>();
            sender.add(vprime);
            sender.add( (new SHA256(vprime)).getSha() );
            
            Request req=new Request(comd.getSha(),sender);
            
            out.writeObject(req);
            
            ObjectInputStream in = new ObjectInputStream(sck.getInputStream());
            Response resp=(Response)in.readObject();
            if (resp.getCode()==300) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error al enviar el voto, "
                                 + "por favor pide ayuda del moderador mas cercano.");
                sck.close();
                return;        
            }            
            String vf=resp.getMessage();
            System.out.println("Voto Firmado: "+vf); 
            
            //mandamos voto a MV
            sck=new Socket(MVD,6987);
            out=new ObjectOutputStream(sck.getOutputStream());
            comd = new SHA256("Signature");           
            sender =new ArrayList<>();
            sender.add(vprime);
            sender.add(vf);
            sender.add(this.fingerprint);           
            
            req=new Request(comd.getSha(),sender); 
            
            out.writeObject(req);
            
            in = new ObjectInputStream(sck.getInputStream());
            resp=(Response)in.readObject();
            if (resp.getCode()==300) {
                System.out.println(resp.getMessage());
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error al enviar el voto, "
                                 + "por favor pide ayuda del moderador mas cercano.");
                sck.close();
                return;        
            }  else{
                System.out.println(resp.getMessage());
                JOptionPane.showMessageDialog(this, "Voto emitido correctamente.");
                CE ce=new CE();
                ce.setVisible(true);
                this.dispose();
            }
            sck.close();
            
            
        } catch (IOException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void displayCandidates(ArrayList<Candidates> options){
            ArrayList<JLabel> labelCont=new ArrayList<>();
            jLabel1.setVisible(false);
            this.setSize(this.getWidth(), (220+(210*((int) Math.ceil(options.size()/2.0)))));            
            int offsetx=0,offsety=0,i=0;
            System.out.println("\n****************************************************\n");
            System.out.println("Recibiendo candidatos:\n Nombre -> Id");
            for(Candidates candidate: options){
                //jlabels dise√±o
                labelCont.add(new JLabel("<html><p align='center'>"+candidate.getName()+"<br>"+candidate.getParty()+"</p></html>"));
                System.out.println(candidate.getName()+" -> "+candidate.getId());
                 ImageIcon imgi=new ImageIcon(Hex.decode(candidate.getImage()));
                labelCont.get(i).setIcon(new ImageIcon(imgi.getImage().getScaledInstance(100, 120, Image.SCALE_DEFAULT)));
                labelCont.get(i).setName(candidate.getId());
                labelCont.get(i).setSize(170,200);
                labelCont.get(i).setVisible(true);
                labelCont.get(i).setLocation(20+offsetx, 140+offsety);
                
                Border border = BorderFactory.createLineBorder(Color.white, 1);
                labelCont.get(i).setBorder(border);
                
                labelCont.get(i).setForeground(new Color(197,197,197));
                labelCont.get(i).setFont(new Font("LeelawadEE UI", Font.PLAIN, 14));
                labelCont.get(i).setHorizontalAlignment(JLabel.CENTER);
                labelCont.get(i).setVerticalAlignment(JLabel.BOTTOM);
                labelCont.get(i).setVerticalTextPosition(JLabel.BOTTOM);
                labelCont.get(i).setHorizontalTextPosition(JLabel.CENTER);
                labelCont.get(i).addMouseListener(new MouseAdapter()  
                {
                    @Override
                    public void mouseClicked(MouseEvent e)
                    {
                        vote(e);
                    }
                });
                
                this.getContentPane().add(labelCont.get(i));
                
                offsetx+=190;
                if (offsetx>190) {
                    offsetx=0;
                    offsety+=210;
                }
                i++;
                
                this.repaint();
                this.revalidate();
            }
    }
    
    private void getCandidates(){
        try {
            Socket sck=new Socket(MID,6986);
            ObjectOutputStream out= new ObjectOutputStream(sck.getOutputStream());
            SHA256 comd = new SHA256("Candidates"); 
            
            Request req=new Request(comd.getSha(),(Object)new ArrayList<>());
            out.writeObject(req);
            ObjectInputStream in = new ObjectInputStream(sck.getInputStream());
            ArrayList<Candidates> candidates=(ArrayList<Candidates>)in.readObject();
            displayCandidates(candidates);
            sck.close();
            
        } catch (IOException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) {
            Logger.getLogger(VOTE.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }   
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            //dise√±o
            this.getContentPane().setBackground(new Color(70, 73, 75));            
            jLabel2.setForeground(new Color(197,197,197));   
            jLabel3.setForeground(new Color(197,197,197));
            
            BufferedImage logo1 = ImageIO.read(new File("img/title.png"));
            BufferedImage logo2= ImageIO.read(new File("img/logo.png"));
            ImageIcon icon=new ImageIcon(logo1);
            jLabel4.setIcon(new ImageIcon(icon.getImage().getScaledInstance(169, 67, Image.SCALE_DEFAULT)));
            icon= new ImageIcon(logo2);
            jLabel5.setIcon(new ImageIcon(icon.getImage().getScaledInstance(63, 67, Image.SCALE_DEFAULT)));
            java.net.URL imageURL = Paths.get("img/loading.gif").toUri().toURL();
            Icon iconl=new ImageIcon(new ImageIcon(imageURL).getImage().getScaledInstance(54, 52, Image.SCALE_DEFAULT));
            jLabel1.setIcon(iconl);
            
            //tcp al MI
            Runnable runnable =() -> { getCandidates(); };
            Thread thread = new Thread(runnable);
            thread.start();
            
        } catch (IOException ex) {
            Logger.getLogger(CE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
      
    }//GEN-LAST:event_formMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VOTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VOTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VOTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VOTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VOTE().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
